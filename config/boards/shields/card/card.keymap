/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>


&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };


/ { 
    combos {
        compatible = "zmk,combos";
        combo_esc { 
            timeout-ms = <15>;
            key-positions = <9 10>;
            bindings = <&kp ESC>;
        };
        combo_4  {
            timeout-ms = <10>;
            key-positions = <13 14>;
            bindings = <&to 4>;
	    layers = <0>; 
        };
        combo_sqt { 
            timeout-ms = <15>;
            key-positions = <2 3>;
            bindings = <&kp SQT>;
	    layers = <2 5>; 
        };
        combo_dqt  {
            timeout-ms = <10>;
            key-positions = <10 11>;
            bindings = <&kp DQT>;
	    layers = <2 5>; 
        };
        combo_ent {
            timeout-ms = <20>;
	    key-positions = <14 15>;
            bindings = <&kp RET>;
        };
        combo_1 {
            timeout-ms = <50>;
	    key-positions = <1 2>;
            bindings = <&to 2>;
	    layers = <0>; 
        };
        combo_5  {
            timeout-ms = <30>;
            key-positions = <13 14>;
            bindings = <&to 5>;
	    layers = <2>; 
        };
        combo_bks {
            timeout-ms = <20>;
	    key-positions = <5 6>;
            bindings = <&kp BKSP>;
        };
        osl {
            timeout-ms = <50>;
	    key-positions = <4 6>;
            bindings = <&sl 6>;
        };

        bslh {
            timeout-ms = <20>;
	    key-positions = <12 13>;
            bindings = <&kp BSLH>;
	    layers = <2>; 
        };
        lbkt {
            timeout-ms = <20>;
	    key-positions = <20 21>;
            bindings = <&kp LBKT>;
	    layers = <2>; 
        };
        
        lalt {
            timeout-ms = <20>;
	    key-positions = <10 11>;
            bindings = <&kp LALT>; 
	    layers = <4>; 
        };
	del {
            timeout-ms = <20>;
	    key-positions = <18 19>;
            bindings = <&kp DEL>;
	    layers = <4>; 
        };
        lclk {
            timeout-ms = <20>;
	    key-positions = <12	13>;
            bindings = <&mkp LCLK>;
	    layers = <4>;
        };


    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        sr: layer_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
	    retro-tap;
            flavor = "balanced";
            bindings = <&kp>, <&to>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

       keymap {
                compatible = "zmk,keymap";
                
       		alpha1 {
		bindings = <
		&trans 		&kp L 	   	&kp G 		&kp D			&kp H 		&kp U    		&kp O		&trans  
		&kp I 		&hm LCTL S 	&hm LALT R	&hm LGUI T 	 	&hm RGUI N    	&hm RALT E    		&hm RCTL A 	&kp C
		&trans	 	&trans 		&trans 		&mt LC(LS(LALT)) SPC 	&sl 1		&trans 			&trans		&trans
								&trans	 		&trans
		>;
		};
       		alpha2 {
		bindings = <
		&trans 	 	&kp V 		&kp W		&kp M	 	 	&kp F    	&kp Y		&kp Z	  	&trans 
		&kp Q	 	&kp W 		&kp P		&kp K 			&kp B 		&kp J		&kp X		&kp COMMA 
		&trans	 	&trans 		&trans 		&sk LSHIFT 		&kp DOT		&trans		&trans		&trans
								&trans	 		&trans
		>;
		};
		
       		sym {
		bindings = <
		&trans 		&kp LA(N3)   	&kp LS(N3) 			&kp DLLR    			&kp LS(COMMA)	&kp LS(DOT)	&kp CARET 	&trans
		&kp GRAVE	&hm LCTL TILDE  &hm LALT LA(RBKT)      		&hm LGUI LA(LS(RBKT)) 	 	&hm RGUI LBRC  	&hm RALT RBRC 	&hm RSHIFT PIPE &trans
		&trans		&trans  	&trans				&sr LSHIFT 0 			&to 3		&trans 		&trans  	&trans
							 			&trans		 		&trans
		>;
		};

		num {
		bindings = <
		&trans		&kp SLASH  	&kp N0		&kp N1		 		&kp N2 		&kp N3 		&kp N4 		&trans
		&kp MINUS	&hm LCTL PLUS 	&hm LALT N5	&hm LGUI N6			&hm RGUI N7	&hm RALT N8 	&hm RCTL N9   	&kp EQUAL
		&trans  	&trans 		&trans		&sr LSHIFT 0 			&hm RGUI DOT	&trans 		&trans  	&trans 
								&trans	 		 	&trans
		>;
		};

		sys {
		bindings = <
		&trans		 	&mwh SCROLL_LEFT	&mmv MOVE_UP    &mwh SCROLL_RIGHT    	&kp LC(LS(TAB))   	&kp UP		&kp RC(TAB)			&trans	
		&td LG(GRAVE) TAB	&mmv MOVE_LEFT 		&mmv MOVE_DOWN	&mmv MOVE_RIGHT 	&hm RGUI LEFT  		&hm RALT DOWN 	&td  LC(LG(LS(N4))) RIGHT 	&td LG(LBKT) LG(RBKT)
		&trans 			&trans  		&trans		&sr LSHIFT 0 		&kp RGUI		&trans 		&trans				&trans 	   
								 		&trans	 		&trans
		>;
		};

		bt {
		bindings = <
		&trans		&bt BT_PRV	&bt BT_NXT	&trans 			&trans 	&trans	&trans	&trans
		&bootloader  	&trans 		&trans 		&trans 			&trans 	&trans 	&trans	&bt BT_CLR
		&trans 	 	&trans 		&trans		&to 0			&trans  &trans  &trans 	&trans   
						 		&trans			&trans
		>;
		};

		os {
		bindings = <
		&trans		&kp ATSN	&kp LA(LBKT)			&kp LA(LS(LBKT))				&kp SEMI	&kp LPRN	&kp RPRN 	&trans
		&kp STAR  	&kp PRCNT	&kp LA(RBKT)      		&kp LA(LS(RBKT))  				&kp AMPS	&kp LBKT	&kp RBKT	&kp MINUS 
		&trans 		&trans 		&trans  			&kp QMARK					&kp EXCL	&trans 		&trans 		&trans   
						 				&trans						&trans

		>;
		};
        
	};
};
